[
  {
    "path": "posts/2021-07-08-hannwindow/",
    "title": "hann window",
    "description": "Add hann window to pure tones.",
    "author": [
      {
        "name": "leslie zhen",
        "url": {}
      }
    ],
    "date": "2021-07-08",
    "categories": [],
    "contents": "\r\nSoundcards and transducers can at times produce an audible pop at the onset or offset of a signal. The Hann window, AKA hanning or raised cosine filter, is one of many windowing functions that can be applied to account for these distortions. The filter gradually ramps up from 0 amplitude and back down. Applying the window to the onset (on ramp) and offset (off ramp) of a signal gives the transducer some “transition” time to reach full signal amplitude.\r\n\r\nThe wav_maker function generates a range of pure tones from f0 to f1, applies the Hann window to each signal, and saves each signal to a separate .wav file.\r\n\r\nimport numpy as np\r\nfrom matplotlib import pyplot as plt\r\nimport thinkdsp\r\n\r\ndef wav_maker(f0, f1, A, d, p, ramp_d):\r\n    \"\"\"\r\n    creates .wav files of ramped pure tones varying in frequency (f) given:\r\n    \r\n    starting frequncy (f0) in Hz\r\n    last frequency (f1) in Hz\r\n    amplitude (A)\r\n    signal plus ramp total duration (d) in ms\r\n    phase offset (p) in radians\r\n    ramp duration (ramp_d) in ms\r\n    \"\"\"\r\n    freq_list = [] \r\n    index = 0\r\n    \r\n    for f in range(f0, f1+1, 1): # create list with all desired frequencies\r\n        freq_list.append(f)\r\n        \r\n        if freq_list[0+index] < f1+1:\r\n            sin_sig = thinkdsp.SinSignal(freq = freq_list[0+index], amp = A, offset = p) # generate sine wave\r\n            index += 1\r\n            \r\n            wave = sin_sig.make_wave(duration = d/1000, framerate=44100) # generate wav file\r\n            \r\n            ramp_samples = 44100*(ramp_d/1000) # generate ramp samples\r\n            window = np.hanning(2*ramp_samples) # hann window is cosine^2 ramp\r\n            w1 = window[:int(len(window)/2)] # use first half of hann function for on ramp\r\n            w2 = window[int(len(window)/2):] # use second half of hann function for off ramp\r\n            w1 = [*w1, *np.ones(len(wave) - len(w1))] # concatenate list with w1 at start, ones thereafter for the duration of the stimulus\r\n            w2 = [*np.ones(len(wave) - len(w2)), *w2] # concatenate list with ones at start, w2 thereafter for the duration of the stimulus\r\n            w1 = np.array(w1)\r\n            w2 = np.array(w2)\r\n            wave.window(w1*w2) # apply on and off ramps to wave\r\n            \r\n            wave.write(filename = str(f) + '.wav')\r\n            wave.plot()\r\n\r\nwav_maker(f0 = 1000, f1 = 1000, A = 1.0, d = 15, p = 0, ramp_d = 5) # use function\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-07-08-hannwindow/python_logo.jpg",
    "last_modified": "2021-07-08T02:59:04-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-05-puretonegenerator/",
    "title": "generate pure tones",
    "description": "Generate pure tones using Python.",
    "author": [
      {
        "name": "leslie zhen",
        "url": {}
      }
    ],
    "date": "2021-07-05",
    "categories": [],
    "contents": "\r\nThis script generates a pure tone for a given level, sampling rate, duration, and frequency. Signal parameters can be adjusted as needed.\r\n\r\n# import libraries\r\nimport pyaudio\r\nimport numpy as np\r\nfrom matplotlib import pyplot as plt\r\nfrom scipy.io.wavfile import write\r\n\r\np = pyaudio.PyAudio()\r\n\r\n# define signal parameters\r\nmag_in_dB = -10     # magnitude, range = [-74, 0], so when mag = 0, A = 1\r\n                    # ydb = 20 log10(y), where y = mag; y is I1/I2\r\namplitude = 10.0 ** ((mag_in_dB)/20.0) #convert mag_in_dB to mag, so volume = mag, range = [-1,1]\r\nfs = 44100          # sampling rate, Hz, must be integer\r\nduration = 1        # in seconds, may be float\r\nf = 1000            # sine frequency, Hz, may be float\r\n\r\n# generate range of samples\r\nsig_sample = np.arange(fs*duration)*(f/fs)\r\n# take sine wave of generated samples and convert to float32 array\r\nsamples = (np.sin(2*np.pi*sig_sample)).astype(np.float32)\r\n\r\n# listen to the samples\r\nstream = p.open(format=pyaudio.paFloat32,\r\n                channels=1,\r\n                rate=fs,\r\n                output=True)\r\nstream.stop_stream()\r\nstream.close()\r\np.terminate()\r\n\r\n# plot signal\r\nplt.plot(samples)\r\nplt.title('signal')\r\nplt.show()\r\n\r\n# write samples to .wav file\r\nwrite('tone.wav', fs, samples*amplitude)\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-07-05-puretonegenerator/python_logo.jpg",
    "last_modified": "2021-07-08T01:36:55-04:00",
    "input_file": {}
  }
]
